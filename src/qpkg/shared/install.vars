#!/bin/sh

# This script is sourced by the upgrade process at the very beginning
# Let's hope Code42 keeps it like that as it allows me to do a clean
# update/upgrade of the QPKG

QPKG_NAME="CrashPlan"
QPKG_CFG_FILE="/etc/config/qpkg.conf"
QPKG_DIR="$(/sbin/getcfg "${QPKG_NAME}" Install_Path -f ${QPKG_CFG_FILE})"
INIT_SCRIPT="${QPKG_DIR}/crashplan.sh"
RESTORE_DIR="${QPKG_DIR}/_restore"
UPGRADE_FILENAME="upgrade.cpi"

echo "$(date) : Upgrade process in progress..." > ${logFile} 2>&1

# Is device ARM ?
is_arm=false
[[ "$(uname -m)" == armv[5-7]* ]] && is_arm=true
echo "$(date) : Is ARM device: ${is_arm}" >> ${logFile} 2>&1

# Create restore directory to store architecture specific file(s)
if [[ "${is_arm}" = true ]]; then
  # remove if already exists
  [[ -d "${RESTORE_DIR}" ]] && /bin/rm -rf "${RESTORE_DIR}"
  if ! /bin/mkdir -p "${RESTORE_DIR}"; then
    echo "$(date) : Couldn't create ${RESTORE_DIR} to store file(s) to be kept" >> ${logFile} 2>&1
    exit 1
  else
    echo "$(date) : Created ${RESTORE_DIR} to store file(s) to be kept" >> ${logFile} 2>&1
  fi
fi

# Store file(s) to be kept in there
if [[ "${is_arm}" = true ]]; then
  echo "$(date) : Storing file(s) to be kept in ${RESTORE_DIR}" >> ${logFile} 2>&1
  if ! /bin/cp "${QPKG_DIR}"/lib/jna*jar "${RESTORE_DIR}"; then
    echo "$(date) : Couldn't backup files to be kept" >> ${logFile} 2>&1
    exit 1
  else
    echo "$(date) : Successfully backuped files to be kept" >> ${logFile} 2>&1
  fi
fi

# stop the CrashPlan instance
echo "$(date) : Stopping ${QPKG_NAME}" >> ${logFile} 2>&1
$INIT_SCRIPT stop
echo "$(date) : Stopped" >> ${logFile} 2>&1

# unarchive cpio
echo "$(date) : Unarchiving upgrade.cpi" >> ${logFile} 2>&1
/bin/cat "${UPGRADE_FILENAME}" | /bin/gzip -d -c - | /opt/bin/cpio -i  --no-preserve-owner

# replace files
echo "$(date) : Removing old jar files..." >> $logFile 2>&1
/bin/rm -f "${QPKG_DIR}"/lib/*.jar >> $logFile 2>&1

echo "$(date) : Moving new asar file..." >> $logFile 2>&1
/bin/mv -f app.asar "${QPKG_DIR}/" >> $logFile 2>&1

echo "$(date) : Moving new jar files..." >> $logFile 2>&1
/bin/mv -f lib/*.jar "${QPKG_DIR}/lib/" >> $logFile 2>&1

if [[ -f "libjtux.so" ]] && [[ "${is_arm}" = false ]]; then
  echo "$(date) : Moving libjtux.so to the app dir..." >> $logFile 2>&1
  /bin/mv -f libjtux*.so "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "libjniwrap.so" ]]; then
  echo "$(date) : Moving libjniwrap.so to the app dir..." >> $logFile 2>&1
  /bin/mv -f libjniwrap*.so "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "libmd5.so" ]] && [[ "${is_arm}" = false ]]; then
  echo "$(date) : Moving libmd5*.so to the app dir..." >> $logFile 2>&1
  /bin/mv -f libmd5*.so "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "libc42archive.so" ]] && [[ "${is_arm}" = false ]]; then
  echo "$(date) : Moving libc42archive*.so to the app dir..." >> $logFile 2>&1
  /bin/mv -f libc42archive*.so "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "libc42core.so" ]] && [[ "${is_arm}" = false ]]; then
  echo "$(date) : Moving libc42core.so to the app dir..." >> $logFile 2>&1
  /bin/mv -f libc42core.so "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "libleveldb.so" ]] && [[ "${is_arm}" = false ]]; then
  echo "$(date) : Moving libleveldb*.so to the app dir..." >> $logFile 2>&1
  /bin/mv -f libleveldb*.so "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "jniwrap.lic" ]]; then
  echo "$(date) : Moving jniwrap.lic to the app dir..." >> $logFile 2>&1
  /bin/mv -f jniwrap.lic "${QPKG_DIR}" >> $logFile 2>&1
fi

if [[ -f "service.log.properties" ]]; then
  echo "$(date) : Moving service.log.properties to the conf dir..." >> $logFile 2>&1
  /bin/mv -f service.log.properties "${QPKG_DIR}/conf" >> $logFile 2>&1
fi

if [[ -f "lang/txt.properties" ]]; then
  echo "$(date) : Moving txt files to the lang dir..." >> $logFile 2>&1
  [[ ! -d "${QPKG_DIR}/lang" ]] && /bin/mkdir "${QPKG_DIR}/lang"
  /bin/mv -f lang/* "${QPKG_DIR}/lang" >> $logFile 2>&1
fi

if [[ -f "lang/custom/txt.properties" ]]; then
  echo "$(date) : Moving custom txt files to the lang dir..." >> $logFile 2>&1
  [[ ! -d "${QPKG_DIR}/lang/custom" ]] && /bin/mkdir "${QPKG_DIR}/lang/custom"
  /bin/mv -f lang/custom/* "${QPKG_DIR}/lang/custom" >> $logFile 2>&1
fi

if [[ -f "service.log.xml" ]]; then
  echo "$(date) : Moving service.log.xml to the conf dir..." >> $logFile 2>&1
  /bin/mv -f service.log.xml "${QPKG_DIR}/conf" >> $logFile 2>&1
fi

# Restore file(s)
if [[ "${is_arm}" = true ]]; then
  if ! /bin/cp "${RESTORE_DIR}"/jna*jar "${QPKG_DIR}"/lib/; then
    echo "$(date) : Couldn't restore files" >> ${logFile} 2>&1
    exit 1
  else
    echo "$(date) : Successfully restored files" >> ${logFile} 2>&1
  fi
  /bin/rm -rf "${RESTORE_DIR}"
fi

# start the CrashPlan instance
echo "$(date) : Starting ${QPKG_NAME}" >> ${logFile} 2>&1
$INIT_SCRIPT start
echo "$(date) : Started" >> ${logFile} 2>&1

# exit so sourcer (upgrade.sh) doesn't keep running
exit 0
