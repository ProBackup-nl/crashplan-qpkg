#!/bin/sh

# This script is sourced by the upgrade process at the very beginning
# Let's hope Code42 keeps it like that as it allows me to do a clean
# update/upgrade of the QPKG

# Update Yoann M 15/05/2016 with new upgrade.cpi format 1435813200470_317.jar upgrade

QPKG_NAME="CrashPlan"
QPKG_CFG_FILE="/etc/config/qpkg.conf"
QPKG_DIR="$(/sbin/getcfg "${QPKG_NAME}" Install_Path -f ${QPKG_CFG_FILE})"
INIT_SCRIPT="${QPKG_DIR}/crashplan.sh"
RESTORE_DIR="${QPKG_DIR}/_restore"

echo "$(date) : Upgrade process in progress..." >> ${logFile} 2>&1

# Is device ARM ?
is_arm=false
[[ "$(uname -m)" == armv[5-7]* ]] && is_arm=true
echo "$(date) : Is ARM device: ${is_arm}" >> ${logFile} 2>&1

# Create restore directory to store architecture specific file(s)
if [[ "${is_arm}" = true ]]; then
  # remove if already exists
  [[ -d "${RESTORE_DIR}" ]] && /bin/rm -rf "${RESTORE_DIR}"
  if ! /bin/mkdir -p "${RESTORE_DIR}"; then
    echo "$(date) : Couldn't create ${RESTORE_DIR} to store file(s) to be kept" >> ${logFile} 2>&1
    exit 1
  else
    echo "$(date) : Created ${RESTORE_DIR} to store file(s) to be kept" >> ${logFile} 2>&1
  fi
fi

# Store file(s) to be kept in there
if [[ "${is_arm}" = true ]]; then
  echo "$(date) : Storing file(s) to be kept in ${RESTORE_DIR}" >> ${logFile} 2>&1
  if ! /bin/cp "${QPKG_DIR}"/lib/jna*jar "${RESTORE_DIR}"; then
    echo "$(date) : Couldn't backup files to be kept" >> ${logFile} 2>&1
    exit 1
  else
    echo "$(date) : Successfully backuped files to be kept" >> ${logFile} 2>&1
  fi
fi

# stop the CrashPlan instance
echo "$(date) : Stopping ${QPKG_NAME}" >> ${logFile} 2>&1
$INIT_SCRIPT stop
echo "$(date) : Stopped" >> ${logFile} 2>&1

echo "$(date) : Checking if cpio is present" >> ${logFile} 2>&1
if [ `which cpio` == "" ]; then
	echo "$(date) : Trying to install cpio" >> ${logFile} 2>&1
	opkg update
	opkg install cpio
	if [ $? -ne 0 ]; then
		echo "$(date) : Unable to install cpio via opkg. Please install opkg https://apps.qnap.community/11-community/10-entware-ng" >> ${logFile} 2>&1
		exit 1
	fi
fi

currentdirectory=`pwd`

echo "$(date) : Current directory '$currentdirectory'" >> ${logFile} 2>&1

## Here start 15/06/2015 patch
if [ -f upgrade.cpi ]; then # Code for new updates
	echo "$(date) : New format, upgrade.cpi file found" >> ${logFile} 2>&1

	mkdir tmp
	if [ $? -ne 0 ]; then
		echo "$(date) : FAILED Unable create temporary directory" >> ${logFile} 2>&1
		exit 1;
	fi

	cd tmp

	echo "$(date) : Try to unpack upgrade.cpi with cpio" >> ${logFile} 2>&1

	cat ../upgrade.cpi | gzip -d -c - | cpio -i  --no-preserve-owner

	if [ $? -ne 0 ]; then
		echo "$(date) : FAILED Unpacking upgrade.cpi file failed" >> ${logFile} 2>&1
		exit 1;
	fi

	if [ `ls lib/ | wc -l` -lt 50 ]; then # Be sure that their is something to copy
		echo "$(date) : FAILED Missing JARs files in /lib/ package directory" >> ${logFile} 2>&1
		exit 1;
	fi
	
	# replace files
	echo "$(date) : Removing old lib directory file to lib_old ..." >> $logFile 2>&1
	rm "${QPKG_DIR}"/lib_old/* # Cleanup old lib_old directory
	rmdir "${QPKG_DIR}/lib_old"
	mkdir "${QPKG_DIR}/lib_old"
	/bin/mv -f "${QPKG_DIR}"/lib/*.jar "${QPKG_DIR}/lib_old" >> $logFile 2>&1

	echo "$(date) : Copying new jar files..." >> $logFile 2>&1
	/bin/mv -f lib/*.jar "${QPKG_DIR}/lib/" >> $logFile 2>&1
	
	if [ $? -ne 0 ]; then
		echo "$(date) : FAILED to copy new files, try to revert" >> ${logFile} 2>&1
		/bin/mv -f "${QPKG_DIR}"/lib_old/*.jar "${QPKG_DIR}/lib" >> $logFile 2>&1
		if [ $? -ne 0 ]; then
			echo "$(date) : FAILED revert failed" >> ${logFile} 2>&1
		else
			echo "$(date) : Lib JAR revert success" >> ${logFile} 2>&1
		fi
		exit 1
	fi


	if [ `ls *.so | wc -l` -gt 0 ]; then
		echo "$(date) : Some .so file need to be copied" >> $logFile 2>&1
		for i in *.so; do
			echo "$(date) : Moving $i to the app dir..." >> $logFile 2>&1
			/bin/mv -f $i "${QPKG_DIR}" >> $logFile 2>&1
			if [ $? -ne 0 ]; then
				echo "$(date) : FAILED Moving $i failed" >> $logFile 2>&1
				exit 1
			fi
		done
	fi

	if [ -d conf ]; then
		echo "$(date) : Conf directory found" >> $logFile 2>&1
		for i in conf/*; do
			echo "$(date) : Moving $i to the app dir..." >> $logFile 2>&1
			/bin/mv -f $i "${QPKG_DIR}/conf/" >> $logFile 2>&1
			if [ $? -ne 0 ]; then
				echo "$(date) : FAILED to move $i failed" >> $logFile 2>&1
				exit 1
			fi
		done
	fi

	if [ -d lang ]; then
		echo "$(date) : Lang directory found" >> $logFile 2>&1
		for i in lang/*; do
			echo "$(date) : Moving $i to the app dir..." >> $logFile 2>&1
			/bin/mv -f $i "${QPKG_DIR}/lang/" >> $logFile 2>&1
			if [ $? -ne 0 ]; then
				echo "$(date) : FAILED to move $i" >> $logFile 2>&1
				exit 1
			fi
		done
	fi

	if [ -d skin ]; then
		echo "$(date) : Skin directory found" >> $logFile 2>&1
		for i in skin/*; do
			echo "$(date) : Moving $i to the app dir..." >> $logFile 2>&1
			/bin/mv -f $i "${QPKG_DIR}/skin/" >> $logFile 2>&1
			if [ $? -ne 0 ]; then
				echo "$(date) : FAILED to move $i" >> $logFile 2>&1
				exit 1
			fi
		done
	fi

else ## Here end 15/06/2015 patch
	# Code for old update
	echo "$(date) : Old upgrade format" >> ${logFile} 2>&1

	# replace files
	echo "$(date) : Removing old jar files..." >> $logFile 2>&1
	/bin/rm -f "${QPKG_DIR}"/lib/*.jar >> $logFile 2>&1

	echo "$(date) : Moving new jar files..." >> $logFile 2>&1
	/bin/mv -f *.jar "${QPKG_DIR}/lib/" >> $logFile 2>&1

	if [[ -f "libjtux.so" ]] && [[ "${is_arm}" = false ]]; then
	  echo "$(date) : Moving libjtux.so to the app dir..." >> $logFile 2>&1
	  /bin/mv -f libjtux*.so "${QPKG_DIR}" >> $logFile 2>&1
	fi

	if [[ -f "libjniwrap.so" ]]; then
	  echo "$(date) : Moving libjniwrap.so to the app dir..." >> $logFile 2>&1
	  /bin/mv -f libjniwrap.so "${QPKG_DIR}" >> $logFile 2>&1
	fi

	if [[ -f "libjniwrap64.so" ]]; then
	  echo "$(date) : Moving libjniwrap64.so to the app dir..." >> $logFile 2>&1
	  /bin/mv -f libjniwrap64.so "${QPKG_DIR}" >> $logFile 2>&1
	fi

	if [[ -f "libmd5.so" ]] && [[ "${is_arm}" = false ]]; then
	  echo "$(date) : Moving libmd5*.so to the app dir..." >> $logFile 2>&1
	  /bin/mv -f libmd5*.so "${QPKG_DIR}" >> $logFile 2>&1
	fi

	if [[ -f "jniwrap.lic" ]]; then
	  echo "$(date) : Moving jniwrap.lic to the app dir..." >> $logFile 2>&1
	  /bin/mv -f jniwrap.lic "${QPKG_DIR}" >> $logFile 2>&1
	fi

	if [[ -f "service.log.properties" ]]; then
	  echo "$(date) : Moving service.log.properties to the conf dir..." >> $logFile 2>&1
	  /bin/mv -f service.log.properties "${QPKG_DIR}/conf" >> $logFile 2>&1
	fi

	if [[ -f "lang/txt.properties" ]]; then
	  echo "$(date) : Moving txt files to the lang dir..." >> $logFile 2>&1
	  [[ ! -d "${QPKG_DIR}/lang" ]] && /bin/mkdir "${QPKG_DIR}/lang"
	  /bin/mv -f lang/* "${QPKG_DIR}/lang" >> $logFile 2>&1
	fi

	if [[ -f "lang/custom/txt.properties" ]]; then
	  echo "$(date) : Moving custom txt files to the lang dir..." >> $logFile 2>&1
	  [[ ! -d "${QPKG_DIR}/lang/custom" ]] && /bin/mkdir "${QPKG_DIR}/lang/custom"
	  /bin/mv -f lang/custom/* "${QPKG_DIR}/lang/custom" >> $logFile 2>&1
	fi

	if [[ -f "service.log.xml" ]]; then
	  echo "$(date) : Moving service.log.xml to the conf dir..." >> $logFile 2>&1
	  /bin/mv -f service.log.xml "${QPKG_DIR}/conf" >> $logFile 2>&1
	fi
fi

# Restore file(s)
if [[ "${is_arm}" = true ]]; then
  if ! /bin/cp "${RESTORE_DIR}"/jna*jar "${QPKG_DIR}"/lib/; then
    echo "$(date) : Couldn't restore files" >> ${logFile} 2>&1
    exit 1
  else
    echo "$(date) : Successfully restored files" >> ${logFile} 2>&1
  fi
  /bin/rm -rf "${RESTORE_DIR}"
fi

# start the CrashPlan instance
echo "$(date) : Starting ${QPKG_NAME}" >> ${logFile} 2>&1
$INIT_SCRIPT start
echo "$(date) : Started" >> ${logFile} 2>&1

# exit so sourcer (upgrade.sh) doesn't keep running
exit 0
